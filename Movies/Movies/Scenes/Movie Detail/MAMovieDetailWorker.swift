//
//  MAMovieDetailWorker.swift
//  Movies
//
//  Created by admin on 8/5/17.
//  Copyright (c) 2017 Tri Vo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import PureLayout

class MAMovieDetailWorker : NSObject {
    fileprivate var movie : MAMovieModel!
    fileprivate var tblViewMain : UITableView!
    fileprivate var sections = [Section(name: ""),
                                Section(name: "MoviesDetail.Overview"),
                                Section(name: "MoviesDetail.Genres"),
                                Section(name: "MoviesDetail.Language"),
                                Section(name: "MoviesDetail.Duration")]
    
    struct Section {
        var name : String
    }
    
    
    
    init(withTableView tbl : UITableView, movie : MAMovieModel) {
        super.init()
        self.movie = movie
        self.tblViewMain = tbl
        self.tblViewMain.delegate = self
        self.tblViewMain.dataSource = self
        self.config()
        
        self.fetchMovieDetail()
    }
    
    
    
    private func config() {
        self.tblViewMain.registerCellNib(MAMovieDetailHeaderTableViewCell.self)
        self.tblViewMain.registerCellNib(MAMovieDetailContentTableViewCell.self)
        self.tblViewMain.estimatedRowHeight = 50
        self.tblViewMain.rowHeight = UITableViewAutomaticDimension
    }
    
    private func fetchMovieDetail() {
        weak var weakSelf = self
        
        
        if let movieId = movie.id {
            MAAppUtils.showNetworkActivityIndicator(true)
            MAAPIMovies.getMovieDetail(movieId.string, { (movieInfo, err) in
                MAAppUtils.showNetworkActivityIndicator(false)
                if let err = err {
                    
                } else {
                    if let movieInfo = movieInfo {
                        weakSelf?.movie = movieInfo
                    }
                    
                    
                    weakSelf?.tblViewMain.reloadWithAnimation(.none)
                }
            })
        }
    }
    

    
    
    func doSomeWork() {
        // NOTE: Do the work
    }
}

extension MAMovieDetailWorker : UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let sectionInfo = sections[section]
        if sectionInfo.name == "MoviesDetail.Genres" {
            return self.movie.genres?.count ?? 0
        } else if sectionInfo.name == "MoviesDetail.Language" {
            return self.movie.languages?.count ?? 0
        }
        
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let section = sections[indexPath.section]
        if section.name == "" {
            return movieHeaderCellAt(indexPath, tableView)
        } else {
            return movieDetailCellAt(indexPath, tableView)
        }
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let section = sections[indexPath.section]
        if section.name == "" {
            return UIScreen.main.bounds.width/1.5
        } else {
            if section.name == "MoviesDetail.Overview" {
                return UITableViewAutomaticDimension
            } else {
                return 50
            }
        }
        
        return 0
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        let sectionInfo = sections[section]
        if sectionInfo.name == "" {
            return 0
        }
        
        return 60
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let sectionInfo = sections[section]
        if sectionInfo.name == "" {
            return nil
        }
        
        let viewHeader = UIView.init(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 60))
        
        viewHeader.backgroundColor = tableView.backgroundColor
        
        let lbl = UILabel.init(forAutoLayout: ())
        viewHeader.addSubview(lbl)
        lbl.textAlignment = .left
        lbl.text = sectionInfo.name.localized().uppercased()
        lbl.textColor = UIColor.red
        lbl.font = UIFont.boldSystemFont(ofSize: 14)
        lbl.autoPinEdge(.left, to: .left, of: viewHeader, withOffset: 15)
        lbl.autoPinEdge(.right, to: .right, of: viewHeader)
        
        lbl.autoPinEdge(.bottom, to: .bottom, of: viewHeader, withOffset: -10)
        
        
        return viewHeader
    }
    
    private func movieHeaderCellAt(_ idx : IndexPath, _ tableView : UITableView) -> UITableViewCell {
        guard let myCell = tableView.dequeueReusableCell(withIdentifier: "MAMovieDetailHeaderTableViewCell", for: idx) as? MAMovieDetailHeaderTableViewCell else {
            return UITableViewCell()
        }
        
        myCell.selectionStyle = .none
        
        myCell.setMovie(self.movie)
        
        return myCell
    }
    
    private func movieDetailCellAt(_ idx : IndexPath, _ tableView : UITableView) -> UITableViewCell {
        guard let myCell = tableView.dequeueReusableCell(withIdentifier: "MAMovieDetailContentTableViewCell", for: idx) as? MAMovieDetailContentTableViewCell else {
            return UITableViewCell()
        }
        
        let section = self.sections[idx.section]
        
        myCell.selectionStyle = .none
        
        var content = ""
        
        if section.name == "MoviesDetail.Overview" {
            content = movie.overview ?? ""
        } else if section.name == "MoviesDetail.Genres" {
            content = self.movie.genres?[idx.row].genre ?? ""
        } else if section.name == "MoviesDetail.Language" {
            content = self.movie.languages?[idx.row].language ?? ""
        } else if section.name == "MoviesDetail.Duration" {
            content = String(format: "%d mins", self.movie.runtime ?? 0)
        }
        
        myCell.setContent(content)
        
        return myCell
    }
    
}
